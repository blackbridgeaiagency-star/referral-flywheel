# EPIC: Creator Dashboard - One-Shot Build

**Context**:
@.claude/CLAUDE.md (Read full project context)
@.claude/PROGRESS.md (Current state)
@app/customer/[experienceId]/page.tsx (Reference existing member dashboard)

**Goal**: Build a complete, production-ready creator dashboard in one orchestrated workflow.

**User Story**: 
As a Whop community owner, I want to see my referral program performance so that I can optimize my growth strategy.

---

## REQUIREMENTS

### Dashboard Must Show:
1. **Revenue Metrics**
   - Total referred revenue (all-time)
   - Monthly referred revenue
   - Average sale value
   - Conversion rate (clicks → sales)

2. **Top Performers**
   - Top 10 members by earnings generated
   - Top 10 members by referral count
   - Their stats (referrals, earnings, conversion rate)

3. **Community Stats**
   - Total active members
   - Total referrals generated
   - Average referrals per member
   - Attribution rate (% of organic vs referred)

4. **Reward Management**
   - Edit reward tiers (5/10/25/100)
   - Edit reward values (e.g., "1 month free")
   - View pending reward approvals
   - Bulk approve/deny rewards

5. **Settings**
   - Welcome message customization
   - Auto-approve rewards toggle
   - Export data to CSV

### Technical Requirements:
- Server Components (where possible)
- Real-time data (no stale cache)
- Mobile responsive
- Dark theme consistent with member dashboard
- Load time < 2 seconds

---

## MULTI-AGENT ORCHESTRATION

### Phase 1: Architecture (@architect)
**Deliverable**: Complete technical design
````markdown
@.claude/agents/architect.md

Design the creator dashboard architecture:

1. **Data Model**:
   - What new database fields needed?
   - What aggregations required?
   - What indexes to add for performance?

2. **API Routes**:
   - List all endpoints needed
   - Request/response schemas
   - Caching strategy

3. **Component Hierarchy**:
````
   CreatorDashboard (page)
   ├─ RevenueMetrics (server component)
   ├─ TopPerformersTable (server component)
   ├─ CommunityStats (server component)
   ├─ RewardManagement (client component)
   └─ SettingsForm (client component)
````

4. **Performance**:
   - Query optimization plan
   - Caching strategy
   - Code splitting approach

Document as ADR-006 in DECISIONS.md.
````

---

### Phase 2: Database Changes (@builder + @architect)
**Deliverable**: Updated schema, migrations, queries
````markdown
@prisma/schema.prisma
@lib/db/queries.ts

Based on ADR-006, implement:

1. **Schema Changes** (if any):
```prisma
   // Add any missing fields to Creator model
```

2. **Create Optimized Queries**:
```typescript
   // lib/db/queries.ts
   
   export async function getCreatorDashboardData(creatorId: string) {
     // Aggregate revenue
     // Top performers
     // Community stats
     // All in ONE query (performance)
   }
```

3. **Migration**:
```bash
   npx prisma migrate dev --name add_creator_dashboard_fields
```

Test queries in Supabase SQL editor first.
````

---

### Phase 3: API Routes (@builder)
**Deliverable**: All backend endpoints
````markdown
Create these API routes:

1. **/app/api/creator/stats/route.ts**
   - GET: Return dashboard data
   - Auth: Check creator ownership

2. **/app/api/creator/top-performers/route.ts**
   - GET: Return top 10 members

3. **/app/api/creator/rewards/route.ts**
   - GET: Fetch pending rewards
   - POST: Approve/deny rewards
   - PATCH: Update reward tiers

4. **/app/api/creator/export/route.ts**
   - GET: Export all data to CSV

Each route:
- Validate input
- Check authentication
- Handle errors
- Return typed responses
````

---

### Phase 4: UI Components (@designer + @builder)
**Deliverable**: All dashboard components
````markdown
Build these components:

1. **RevenueMetrics.tsx**
```tsx
   // Server Component
   // Shows 4 metric cards (total revenue, monthly, avg sale, conversion)
   // Purple gradients
   // Includes trend indicators (+15%)
```

2. **TopPerformersTable.tsx**
```tsx
   // Server Component
   // Table with avatar, username, referrals, earnings
   // Sortable columns
   // Pagination (show 10 per page)
```

3. **CommunityStatsGrid.tsx**
```tsx
   // Server Component
   // Grid layout showing community health metrics
```

4. **RewardManagementForm.tsx**
```tsx
   // Client Component
   // Editable reward tiers
   // Live preview of changes
   // Save button with loading state
```

5. **CreatorDashboard.tsx** (Main Page)
```tsx
   // app/seller-product/[experienceId]/page.tsx
   // Assembles all components
   // Handles data fetching
   // Error boundaries
```

All components:
- Use shadcn/ui primitives
- Match dark theme (#0F0F0F background)
- Mobile responsive (grid → stack)
````

---

### Phase 5: Styling & Polish (@designer)
**Deliverable**: Beautiful, polished UI
````markdown
Polish the creator dashboard:

1. **Visual Hierarchy**
   - Revenue metrics most prominent (top)
   - Tables below (scannable)
   - Settings at bottom (less frequent)

2. **Color Scheme**
   - Match member dashboard exactly
   - Purple gradients for CTAs
   - Green for positive metrics
   - Red for negative metrics

3. **Animations**
   - Fade in on load
   - Number counters (animate from 0)
   - Smooth table sorting
   - Button hover states

4. **Responsive Design**
   - Mobile: Stack all cards
   - Tablet: 2-column grid
   - Desktop: 3-column grid
   - Tables: Horizontal scroll on mobile

5. **Accessibility**
   - ARIA labels on all interactive elements
   - Keyboard navigation (Tab through forms)
   - Screen reader friendly
````

---

### Phase 6: Testing (@tester)
**Deliverable**: Verified, production-ready feature
````markdown
Test the creator dashboard:

**Test Cases**:

1. **Data Accuracy**
   - [ ] Revenue matches commission table
   - [ ] Top performers sorted correctly
   - [ ] Stats aggregate properly

2. **UI/UX**
   - [ ] Loads in < 2 seconds
   - [ ] Mobile responsive
   - [ ] No console errors
   - [ ] All buttons work

3. **Edge Cases**
   - [ ] No members yet (empty state)
   - [ ] 1 member (minimum data)
   - [ ] 1000+ members (performance)
   - [ ] Very long usernames (overflow)

4. **Security**
   - [ ] Can't access other creator's dashboards
   - [ ] Auth required for all routes
   - [ ] Input validation works

**Bug Documentation**:
For each bug found:
- Add to BUGS.md with severity
- Include reproduction steps
- Assign to @builder for fix

**Sign-Off Checklist**:
- [ ] All test cases pass
- [ ] No critical bugs
- [ ] Performance acceptable
- [ ] Ready for production
````

---

### Phase 7: Documentation (@conductor)
**Deliverable**: Updated project files
````markdown
Update project documentation:

1. **PROGRESS.md**
```markdown
   ## 2025-10-23 - Creator Dashboard Complete ✅
   
   ### Completed
   - ✅ Created 5 new components
   - ✅ Added 4 API routes
   - ✅ Implemented reward management
   - ✅ Built CSV export
   - ✅ Tested on mobile/desktop
   
   ### Metrics
   - Files created: 12
   - Lines of code: 800
   - Test cases passed: 20/20
   - Load time: 1.2s
```

2. **CLAUDE.md**
   - Add creator dashboard to file structure
   - Update "Current State" section
   - Remove from "Next Priorities"

3. **DECISIONS.md**
   - Mark ADR-006 as "Accepted"

4. **BUGS.md**
   - Close any dashboard-related bugs

5. **Create README for Future Devs**
```markdown
   # Creator Dashboard
   
   ## Overview
   Full-featured dashboard for Whop community owners.
   
   ## Files
   - `/app/seller-product/[experienceId]/page.tsx` - Main page
   - `/app/api/creator/*` - Backend routes
   - `/components/creator/*` - Reusable components
   
   ## Usage
   Visit: http://localhost:3000/seller-product/[experienceId]
   
   ## Features
   - Revenue analytics
   - Top performers
   - Reward management
   - CSV export
```
````

---

## EXECUTION SUMMARY

After all phases complete, provide:

### Deliverables
````markdown
✅ **Created**:
- 1 new page
- 5 new components
- 4 API routes
- 1 database migration
- 12 files total

✅ **Modified**:
- prisma/schema.prisma
- lib/db/queries.ts
- 3 files updated

✅ **Tests**:
- 20/20 test cases passed
- 0 critical bugs
- 2 minor bugs (documented in BUGS.md)

✅ **Performance**:
- Load time: 1.2s (target: <2s) ✅
- Lighthouse score: 95/100 ✅
- Mobile responsive: ✅

✅ **Documentation**:
- PROGRESS.md updated
- ADR-006 documented
- README created
````

### Screenshots
[Show before/after or key screens]

### Next Steps
````markdown
Ready for:
- [ ] Code review
- [ ] Staging deployment
- [ ] User testing
- [ ] Production deployment
````

---

**END OF ONE-SHOT BUILD**